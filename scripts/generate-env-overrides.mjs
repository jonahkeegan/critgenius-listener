#!/usr/bin/env node
/**
 * Generate minimal environment override files:
 *   - .env.development
 *   - .env.staging
 *   - .env.production
 * Each file contains only values that differ materially or are required for that env,
 * excluding the Proxy Registry managed keys (generated separately).
 *
 * Usage:
 *   node scripts/generate-env-overrides.mjs [--check]
 */
import fs from 'node:fs';
import path from 'node:path';
import { fileURLToPath, pathToFileURL } from 'node:url';

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const repoRoot = path.resolve(__dirname, '..');
const isCheck = process.argv.includes('--check');

async function loadSharedEnvironment() {
  try {
    return await import('@critgenius/shared/config/environment');
  } catch {
    const localPath = path.resolve(repoRoot, 'packages', 'shared', 'dist', 'config', 'environment.js');
    return await import(pathToFileURL(localPath).href);
  }
}

async function loadProxyRegistry() {
  try {
    return await import('@critgenius/shared/config/proxyRegistry');
  } catch {
    const localPath = path.resolve(repoRoot, 'packages', 'shared', 'dist', 'config', 'proxyRegistry.js');
    return await import(pathToFileURL(localPath).href);
  }
}

function maskIfSecret(key, value) {
  const secretLike = new Set([
    'ASSEMBLYAI_API_KEY',
    'JWT_SECRET',
    'CRITGENIUS_ECOSYSTEM_API_KEY',
    'CRITGENIUS_SERVICE_TOKEN',
    'REDIS_PASSWORD',
    'SLACK_WEBHOOK_URL',
    'DISCORD_WEBHOOK_URL',
  ]);
  if (secretLike.has(key)) {
    if (key === 'JWT_SECRET') return 'change-me-min-32-chars';
    if (key === 'ASSEMBLYAI_API_KEY') return 'your_assemblyai_api_key_here';
    return '';
  }
  return value;
}

function stringifyEnv(obj, exclude = new Set()) {
  return Object.keys(obj)
    .filter(k => !exclude.has(k))
    .sort()
    .map(k => `${k}=${maskIfSecret(k, String(obj[k] ?? ''))}`)
    .join('\n');
}

function writeIfChanged(filePath, content) {
  const existing = fs.existsSync(filePath) ? fs.readFileSync(filePath, 'utf8') : '';
  if (isCheck) {
    if (existing !== content) {
      console.error(`[generate-env-overrides] Drift detected in ${path.basename(filePath)}`);
      process.exit(1);
    }
    return false;
  }
  if (existing !== content) {
    fs.writeFileSync(filePath, content);
    console.log(`[generate-env-overrides] Updated ${path.basename(filePath)}`);
    return true;
  }
  console.log(`[generate-env-overrides] Up-to-date ${path.basename(filePath)}`);
  return false;
}

async function main() {
  const [envMod, { PROXY_ENV_KEYS }] = await Promise.all([
    loadSharedEnvironment(),
    loadProxyRegistry(),
  ]);
  const proxyKeys = new Set(Object.values(PROXY_ENV_KEYS));

  const seeds = {
    development: {
      NODE_ENV: 'development',
      ASSEMBLYAI_API_KEY: 'your_assemblyai_api_key_here',
      MONGODB_URI: 'mongodb://localhost:27017/critgenius-listener',
      REDIS_URL: 'redis://localhost:6379',
      JWT_SECRET: 'dev-jwt-secret-change-in-production',
    },
    staging: {
      NODE_ENV: 'staging',
      ASSEMBLYAI_API_KEY: 'your_assemblyai_api_key_here',
      MONGODB_URI: 'mongodb+srv://username:password@staging.mongodb.net/critgenius-listener?retryWrites=true&w=majority',
      REDIS_URL: 'rediss://username:password@staging-redis.example.com:6379',
      JWT_SECRET: 'change-me-min-32-chars',
    },
    production: {
      NODE_ENV: 'production',
      ASSEMBLYAI_API_KEY: 'your_assemblyai_api_key_here',
      MONGODB_URI: 'mongodb+srv://username:password@prod.mongodb.net/critgenius-listener?retryWrites=true&w=majority&ssl=true',
      REDIS_URL: 'rediss://username:password@prod-redis.example.com:6379',
      JWT_SECRET: 'change-me-min-32-chars',
    },
  };

  const items = [
    {
      name: 'development',
      schema: envMod.developmentEnvironmentSchema,
      out: path.resolve(repoRoot, '.env.development.example'),
    },
    {
      name: 'staging',
      schema: envMod.stagingEnvironmentSchema,
      out: path.resolve(repoRoot, '.env.staging.example'),
    },
    {
      name: 'production',
      schema: envMod.productionEnvironmentSchema,
      out: path.resolve(repoRoot, '.env.production.example'),
    },
  ];

  for (const { name, schema, out } of items) {
    const parsed = schema.safeParse(seeds[name]);
    const base = parsed.success ? parsed.data : seeds[name];
    // Exclude proxy-managed keys from overrides to avoid duplication
    const content = [
      `# ===========================================`,
      `# CritGenius Listener - ${name[0].toUpperCase()}${name.slice(1)} Environment Configuration`,
      `# ===========================================`,
      `# Generated by scripts/generate-env-overrides.mjs`,
      '',
      stringifyEnv(base, proxyKeys),
      '',
    ].join('\n');
    writeIfChanged(out, content);
  }
}

if (import.meta.url === pathToFileURL(process.argv[1]).href) {
  main().catch(e => {
    console.error('[generate-env-overrides] Failed:', e && e.message ? e.message : e);
    process.exit(1);
  });
}
